// Code generated by MockGen. DO NOT EDIT.
// Source: ./pubsub/pubsub.go

// Package mock_pubsub is a generated GoMock package.
package mock_pubsub

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	pubsub0 "github.com/albertsundjaja/go-gcp-pubsub-test-demo/pubsub_client"
	gomock "github.com/golang/mock/gomock"
)

// MockIPubsubPublishResult is a mock of IPubsubPublishResult interface.
type MockIPubsubPublishResult struct {
	ctrl     *gomock.Controller
	recorder *MockIPubsubPublishResultMockRecorder
}

// MockIPubsubPublishResultMockRecorder is the mock recorder for MockIPubsubPublishResult.
type MockIPubsubPublishResultMockRecorder struct {
	mock *MockIPubsubPublishResult
}

// NewMockIPubsubPublishResult creates a new mock instance.
func NewMockIPubsubPublishResult(ctrl *gomock.Controller) *MockIPubsubPublishResult {
	mock := &MockIPubsubPublishResult{ctrl: ctrl}
	mock.recorder = &MockIPubsubPublishResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubsubPublishResult) EXPECT() *MockIPubsubPublishResultMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIPubsubPublishResult) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPubsubPublishResultMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPubsubPublishResult)(nil).Get), ctx)
}

// MockIPubsubTopic is a mock of IPubsubTopic interface.
type MockIPubsubTopic struct {
	ctrl     *gomock.Controller
	recorder *MockIPubsubTopicMockRecorder
}

// MockIPubsubTopicMockRecorder is the mock recorder for MockIPubsubTopic.
type MockIPubsubTopicMockRecorder struct {
	mock *MockIPubsubTopic
}

// NewMockIPubsubTopic creates a new mock instance.
func NewMockIPubsubTopic(ctrl *gomock.Controller) *MockIPubsubTopic {
	mock := &MockIPubsubTopic{ctrl: ctrl}
	mock.recorder = &MockIPubsubTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubsubTopic) EXPECT() *MockIPubsubTopicMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIPubsubTopic) Publish(ctx context.Context, msg *pubsub.Message) pubsub0.IPubsubPublishResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, msg)
	ret0, _ := ret[0].(pubsub0.IPubsubPublishResult)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIPubsubTopicMockRecorder) Publish(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIPubsubTopic)(nil).Publish), ctx, msg)
}

// MockIPubsubClient is a mock of IPubsubClient interface.
type MockIPubsubClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPubsubClientMockRecorder
}

// MockIPubsubClientMockRecorder is the mock recorder for MockIPubsubClient.
type MockIPubsubClientMockRecorder struct {
	mock *MockIPubsubClient
}

// NewMockIPubsubClient creates a new mock instance.
func NewMockIPubsubClient(ctrl *gomock.Controller) *MockIPubsubClient {
	mock := &MockIPubsubClient{ctrl: ctrl}
	mock.recorder = &MockIPubsubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubsubClient) EXPECT() *MockIPubsubClientMockRecorder {
	return m.recorder
}

// Topic mocks base method.
func (m *MockIPubsubClient) Topic(topicId string) pubsub0.IPubsubTopic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", topicId)
	ret0, _ := ret[0].(pubsub0.IPubsubTopic)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockIPubsubClientMockRecorder) Topic(topicId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockIPubsubClient)(nil).Topic), topicId)
}
